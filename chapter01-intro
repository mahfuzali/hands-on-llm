{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-02T14:58:16.896542Z","iopub.execute_input":"2025-07-02T14:58:16.896901Z","iopub.status.idle":"2025-07-02T14:58:16.903219Z","shell.execute_reply.started":"2025-07-02T14:58:16.896870Z","shell.execute_reply":"2025-07-02T14:58:16.902181Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"!pip install transformers>=4.40.1 accelerate>=0.27.2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T14:58:16.905104Z","iopub.execute_input":"2025-07-02T14:58:16.905450Z","iopub.status.idle":"2025-07-02T14:58:45.913851Z","shell.execute_reply.started":"2025-07-02T14:58:16.905420Z","shell.execute_reply":"2025-07-02T14:58:45.913116Z"}},"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Ignoring invalid distribution ~vidia-cudnn-cu12 (/usr/local/lib/python3.11/dist-packages)\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution ~vidia-cudnn-cu12 (/usr/local/lib/python3.11/dist-packages)\u001b[0m\u001b[33m\n\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution ~vidia-cudnn-cu12 (/usr/local/lib/python3.11/dist-packages)\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"from transformers import AutoModelForCausalLM, AutoTokenizer\n\n# Load model and tokenizer\nmodel = AutoModelForCausalLM.from_pretrained(\n    \"microsoft/Phi-3-mini-4k-instruct\",\n    device_map=\"cuda\",\n    torch_dtype=\"auto\",\n    trust_remote_code=False,\n)\ntokenizer = AutoTokenizer.from_pretrained(\"microsoft/Phi-3-mini-4k-instruct\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T14:58:45.915023Z","iopub.execute_input":"2025-07-02T14:58:45.915357Z","iopub.status.idle":"2025-07-02T15:00:14.326827Z","shell.execute_reply.started":"2025-07-02T14:58:45.915307Z","shell.execute_reply":"2025-07-02T15:00:14.325835Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/967 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f1d6da1d386149d7a6cc936db69e8b65"}},"metadata":{}},{"name":"stderr","text":"2025-07-02 14:59:01.701254: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1751468341.905591      35 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1751468341.966126      35 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors.index.json: 0.00B [00:00, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d289ce39340846ccbbe0c7fa3a93dd8d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Fetching 2 files:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e1c7cb3c4b064525a71092b52606f6c7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00002-of-00002.safetensors:   0%|          | 0.00/2.67G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"87bddfc018234e698b1c6b6a562bbdf2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00001-of-00002.safetensors:   0%|          | 0.00/4.97G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a2768bf60376458f8f78c24662c37abe"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"522bf0f08d1543dfae15941ef955de44"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/181 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4221c9a7ef23484cbcaa2bc6c42de2cc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json: 0.00B [00:00, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a2916872467a4a21ac7432c477e8d19b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.model:   0%|          | 0.00/500k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af20cca867d74a74ad04af2f12c3548e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json: 0.00B [00:00, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d4474bba5d5f4268b865b197ece20006"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"added_tokens.json:   0%|          | 0.00/306 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"339453b0f1674d5689aba0b3aaa34e73"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/599 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"41581148ab64438a9b5f262bc9d16537"}},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"from transformers import pipeline\n\n# Create a pipeline\ngenerator = pipeline(\n    \"text-generation\",\n    model=model,\n    tokenizer=tokenizer,\n    return_full_text=False,\n    max_new_tokens=500,\n    do_sample=False\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T15:00:14.328365Z","iopub.execute_input":"2025-07-02T15:00:14.329167Z","iopub.status.idle":"2025-07-02T15:00:14.795068Z","shell.execute_reply.started":"2025-07-02T15:00:14.329138Z","shell.execute_reply":"2025-07-02T15:00:14.794304Z"}},"outputs":[{"name":"stderr","text":"Device set to use cuda\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# The prompt (user input / query)\nmessages = [\n    {\"role\": \"user\", \"content\": \"Create a funny joke about chickens.\"}\n]\n\n# Generate output\noutput = generator(messages)\nprint(output[0][\"generated_text\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T15:00:14.795839Z","iopub.execute_input":"2025-07-02T15:00:14.796063Z","iopub.status.idle":"2025-07-02T15:00:18.345103Z","shell.execute_reply.started":"2025-07-02T15:00:14.796045Z","shell.execute_reply":"2025-07-02T15:00:18.344176Z"}},"outputs":[{"name":"stdout","text":" Why did the chicken join the band? Because it had the drumsticks!\n","output_type":"stream"}],"execution_count":8}]}